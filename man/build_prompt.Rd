% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/build_prompt.R
\name{build_prompt}
\alias{build_prompt}
\title{Build a prompt string from a template and schema}
\usage{
build_prompt(template, text, keys = NULL)
}
\arguments{
\item{template}{Character scalar. A prompt template that may contain the
placeholders \code{{text}} and \code{{json_format}}. These are replaced using
\pkg{glue}.}

\item{text}{Character scalar. The input text to inject into \code{{text}}.
If \code{NULL}, \code{NA}, or empty (\code{""}), the function returns \code{"Texte manquant"}.}

\item{keys}{Named list or \code{NULL}. When not \code{NULL}, each element value is a
\strong{type string} (\code{"integer"}, \code{"numeric"}, \code{"character"}, \code{"logical"}),
which is mapped to a human‑readable “allowed values” hint that forms the
\code{{json_format}} block shown to the model. (This is a \emph{display aid} only;
parsing/validation happens in \code{gpt_column()}).}
}
\value{
A single character string: the fully rendered prompt.
}
\description{
\code{build_prompt()} fills a prompt template by injecting the raw input text
(\code{{text}}) and, if provided, a one‑line JSON \strong{format hint} (\code{{json_format}})
derived from \code{keys}. It is typically used together with \code{gpt_column()}, where
\code{keys} is the single source of truth for the expected output schema.
}
\details{
\itemize{
\item The \code{{json_format}} block is rendered as a one‑line example like
\code{{ "isolement_bin": 0 ou 1 ou NA, "score": un nombre (ex: 3.14) }}.
\item This helper does \strong{not} enforce types—it's purely for prompt readability.
Type enforcement and allowed‑set checks should be implemented in the
downstream parser (e.g., \code{gpt_column()}).
}
}
\examples{
template <- paste0(
  "Tu es un assistant.\n\n",
  "Texte :\n\"{text}\"\n\n",
  "Réponds avec un JSON une seule ligne, format :\n",
  "{json_format}\n",
  "- Clés entre guillemets. Aucune autre sortie."
)

keys <- list(
  isolement_bin = "integer",
  score         = "numeric"
)

build_prompt(
  template,
  text = "Patient vit seul depuis 2 ans.",
  keys = keys
)

# Without a schema, {json_format} is empty and simply omitted:
build_prompt(template, text = "Texte libre", keys = NULL)

}
\seealso{
\code{\link[=gpt_column]{gpt_column()}} to apply the prompt over a column and parse results,
and \code{\link[=gpt]{gpt()}} to send a single prompt to a model.
}

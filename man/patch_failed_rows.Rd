% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/patch_failed_rows.R
\name{patch_failed_rows}
\alias{patch_failed_rows}
\title{Retry Failed Rows in a \code{gpt_column()} Call}
\usage{
patch_failed_rows(
  data,
  prompt,
  col,
  id_col,
  keys = NULL,
  max_attempts = 3,
  auto_correct_keys = TRUE,
  relaxed = TRUE,
  print_retry = TRUE,
  ...
)
}
\arguments{
\item{data}{A data frame that was processed by \code{gpt_column()} and has an
\code{"invalid_rows"} attribute (integer vector of row indices that failed).}

\item{prompt}{Character scalar. The prompt string to pass back into
\code{gpt_column()}.}

\item{col}{Column in \code{data} containing the text to be processed by
\code{gpt_column()}. Use tidy-eval notation (unquoted column name).}

\item{id_col}{Column in \code{data} that uniquely identifies each row. Used to
join retry results back into the main dataset. Must have unique values.}

\item{keys}{Optional named list of expected output keys and their R types,
passed to \code{gpt_column()}.}

\item{max_attempts}{Integer. Maximum number of attempts per row before
giving up. Default is 3.}

\item{auto_correct_keys}{Logical. Whether to enable key name autocorrection
in \code{gpt_column()}. Default is \code{TRUE}.}

\item{relaxed}{Logical. Whether to run in relaxed mode in \code{gpt_column()}.
Default is \code{TRUE}.}

\item{print_retry}{Logical. If \code{TRUE} (default), prints the combined retry
results for inspection (truncated after 50 rows).}

\item{...}{Additional arguments passed to \code{gpt_column()}.}
}
\value{
A data frame with successful retries merged back in, and an updated
\code{"invalid_rows"} attribute containing the indices of any rows that still
failed after all attempts.
}
\description{
Attempts to re-run \code{gpt_column()} on rows that previously failed validation,
updating the original dataset with any successful retries.
}
\details{
This is intended for use when \code{gpt_column()} returns a tibble with an
\code{"invalid_rows"} attribute indicating which rows failed. The function will
loop through those rows, retrying each one up to \code{max_attempts} times, and
patch the original data frame in-place for any rows that succeed.

The function:
\enumerate{
\item Checks the \code{"invalid_rows"} attribute of \code{data}.
\item Loops through only those rows that failed.
\item Calls \code{gpt_column()} on each row individually, catching errors.
\item Immediately updates the original data for any rows that pass validation.
\item Retries remaining failures until \code{max_attempts} is reached or all pass.
}

This sequential version does \strong{not} support parallel retries. It is safer
for debugging and avoids concurrency issues.
}
\examples{
\dontrun{
# Suppose 'df' was processed by gpt_column() and has invalid rows
attr(df, "invalid_rows")

# Retry failed rows up to 2 times
df <- patch_failed_rows(
  data = df,
  prompt = "Extract key medical variables.",
  col = note_text,
  id_col = patient_id,
  keys = list(age = "integer", diagnosis = "character"),
  max_attempts = 2
)

# Inspect which rows still failed
attr(df, "invalid_rows")
}

}
\seealso{
\code{\link[=gpt_column]{gpt_column()}} for the main extraction function.
}

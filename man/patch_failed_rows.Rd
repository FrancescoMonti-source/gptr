% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/patch_failed_rows.R
\name{patch_failed_rows}
\alias{patch_failed_rows}
\title{Retry and Patch Failed Rows from \code{gpt_column()} Output}
\usage{
patch_failed_rows(
  data,
  prompt,
  col,
  id_col,
  keys = NULL,
  max_attempts = 3,
  auto_correct_keys = TRUE,
  relaxed = TRUE,
  parallel = FALSE,
  print_retry = TRUE,
  ...
)
}
\arguments{
\item{data}{A tibble returned by \code{gpt_column()}, with the \code{"invalid_rows"} attribute.}

\item{prompt}{The same prompt or prompt function used in the original \code{gpt_column()} call.}

\item{col}{Unquoted name of the column containing free-text input sent to the model.}

\item{id_col}{Unquoted name of a column uniquely identifying rows (e.g., \code{PATID}). Used to patch results.}

\item{keys}{(Optional) Named list of expected output keys and their types (e.g., \code{list(foo = "integer")}).}

\item{max_attempts}{Not currently used in this version. Included for future compatibility.}

\item{auto_correct_keys}{Logical. Whether to allow fuzzy correction of unexpected keys. Default: \code{TRUE}.}

\item{relaxed}{Logical. If \code{TRUE}, tolerate missing or extra keys (relaxed JSON validation). Default: \code{TRUE}.}

\item{parallel}{Logical. If \code{TRUE}, uses parallel evaluation via \code{furrr::future_map_dfr()}. Default: \code{FALSE}.}

\item{print_retry}{Logical. If \code{TRUE}, prints the result of retried rows. Useful for debugging. Default: \code{FALSE}.}

\item{...}{Additional arguments passed to \code{gpt_column()}.}
}
\value{
A tibble of the same structure as the input \code{data}, with successful retries patched in.
The \code{"invalid_rows"} attribute is updated to reflect remaining failures.
}
\description{
This function retries only the rows that previously failed when using \code{gpt_column()},
identified via the \code{"invalid_rows"} attribute. It reprocesses these rows in parallel
(if enabled) and patches the successful outputs back into the original dataset.
}
\details{
The function is useful for recovering from transient parsing or model errors,
especially when using local LLMs or fragile prompts.
\itemize{
\item Only rows marked as invalid are retried.
\item Progress is tracked via \code{{progressr}}.
\item Parallelization is controlled by \code{{furrr}} and requires an active \code{future::plan()}.
\item Each row is retried independently; failed retries are left unchanged.
}
}
\examples{
\dontrun{
result <- gpt_column(data = df, col = note, prompt = prompt, keys = keys)

# Retry failed rows by patient ID:
result <- patch_failed_rows(
  data = result,
  prompt = prompt,
  col = note,
  id_col = PATID,
  keys = keys
)

# Check which rows still failed:
attr(result, "invalid_rows")
}

}
